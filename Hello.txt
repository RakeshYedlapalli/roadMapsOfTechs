Ji<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<springProfile name="!dev,!dev-cty,!int,!int-cty,!pre,!pre2,!prd,!stg,!uat2">
		<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	</springProfile>
	<include resource="org/springframework/boot/logging/logback/console-appender.xml" />
	<springProperty scope="context" name="logFolder" source="com.cacib.loanscape.ldt.log.folder" defaultValue="./log" />
	<springProperty scope="context" name="logFile" source="com.cacib.loanscape.ldt.log.filename" defaultValue="logs" />
	<springProperty scope="context" name="logFileExtention" source="com.cacib.loanscape.ldt.log.file.extention" defaultValue="log" />
	<springProperty scope="context" name="appRootLogLevel" source="com.cacib.loanscape.ldt.log.root" defaultValue="TRACE" />
	<springProperty scope="context" name="appName" source="spring.application.name" />
	<springProperty scope="context" name="componentName" source="spring.application.component.name" />
	<springProperty scope="context" name="envName" source="spring.application.env" />
	<timestamp key="timestamp-by-second" datePattern="yyyy-MM-dd'T'HH:mm:ss.SSSZ" />
	<timestamp key="timestamp-by-day" datePattern="yyyy-MM-dd" />

	<springProfile name="!dev,!dev-cty,!int,!int-cty,!pre,!pre2,!prd,!stg,!uat2">
		<appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
			<encoder>
				<pattern>[CorrelationId:%X{correlationId}] - ${CONSOLE_LOG_PATTERN}</pattern>
			</encoder>
		</appender>
	</springProfile>

	<springProfile name="dev,dev-cty,int,int-cty,pre,pre2,prd,stg,uat2,default">
		<appender name="rollingFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
			<file>${logFolder}/${logFile}.${logFileExtention}</file>
			<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
				<fileNamePattern>${logFolder}/${logFile}.%d{yyyy-MM-dd}.${logFileExtention}</fileNamePattern>
			</rollingPolicy>
			<encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
				<providers>
					<logstashMarkers />
					<pattern>
						<pattern>
							{
								"@t": "%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ}",
								"@s": "%level",
								"@m": "%message",
								"@sql": "#asJson{%mdc{sqlRequest}}",
								"@e": "${envName:-}",
								"@a": "${appName:-}",
								"@cp": "${componentName:-}",
								"@scp": "%logger{40}",
								"@u": "#asJson{%mdc{user}}",
								"@h": "%mdc{host}",
								"@co": "%mdc{correlationId}",
								"@v": "%mdc{version}",
								"@st": "%exception{full}"
							}
						</pattern>
					</pattern>
				</providers>
			</encoder>
		</appender>
	</springProfile>

	<root level="${appRootLogLevel}">
		<springProfile name="!dev,!dev-cty,!int,!int-cty,!pre,!pre2,!prd,!stg,!uat2">
			<appender-ref ref="consoleAppender" />
		</springProfile>
		<springProfile name="dev,dev-cty,int,int-cty,pre,pre2,prd,stg,uat2,default">
			<appender-ref ref="rollingFileAppender" />
		</springProfile>
	</root>

	<logger name="com.cacib" level="DEBUG" />
	<logger name="org.hibernate" level="INFO" />
	<logger name="org.hibernate.SQL" level="ERROR" />
	<logger name="org.springframework.jdbc.core.JdbcTemplate" level="ERROR" />
	<logger name="org.springframework.boot.devtools" level="INFO" />
	<logger name="org.springframework.boot" level="TRACE" />
	<logger name="org.springframework.boot.web" level="INFO" />
	<logger name="org.springframework.boot.liquibase" level="INFO" />
	<logger name="org.springframework" level="INFO" />
	<logger name="com.zaxxer" level="INFO" />
	<logger name="liquibase" level="ERROR" />
	<logger name="LiquibaseSchemaResolver" level="ERROR" />
	<logger name="org.apache.tomcat.util" level="INFO" />
	<logger name="org.apache.catalina.session" level="ERROR" />
	<logger name="javax.management" level="INFO" />
	<logger name="org.apache.catalina.loader" level="ERROR" />
	<logger name="springfox.documentation.spring.web" level="ERROR" />
	<logger name="org.postgresql" level="INFO" />
	<logger name="org.keycloak.adapters" level="ERROR" />
	<logger name="org.docx4j" level="WARN" />
	<logger name="org.apache.coyote" level="INFO" />
	<logger name="org.springframework.boot.actuate" level="INFO" />
	<logger name="com.cacib.loanscape.rpx.api" level="INFO" />
	<logger name="springfox.documentation" level="INFO" />

</configuration>


-----------------------------------------


public Optional<Opportunity> fetch(Long id) {
    var optionalDeal = dealService.fetchDeal(id);
    optionalDeal.ifPresent(deal -> {
      Collection<EDealActor> dealActors = dealActorService.findByDealId(id);
      CompletableFuture<Void> commercialClientCF = CompletableFuture.runAsync(() -> dealActorService.setCommercialClients(deal, dealActors), threadPoolTaskExecutor);
      CompletableFuture<Void> validationsCF = CompletableFuture.runAsync(() -> dealService.getAllValidations(deal), threadPoolTaskExecutor);
      CompletableFuture<Void> counterpartiesCF = CompletableFuture.runAsync(() -> setCounterparties(deal, dealActors), threadPoolTaskExecutor);
      CompletableFuture<Void> combinedCF = CompletableFuture.allOf(commercialClientCF, validationsCF, counterpartiesCF);
      try {
        combinedCF.get();
      } catch (ExecutionException e) {
        throw new LdtTechnicalException(e);
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new LdtTechnicalException(e);
      }
    });
    return optionalDeal.map(opportunityDealMapper::toOpportunityDto);
  }


-------------------------------

Caused by: liquibase.exception.MigrationFailedException: Migration failed for changeset liquibase/1.6.0/homepage-view-update.xml::add-product-line-and-teams-to-homepage-view-h2::ut2z9g:
     Reason: liquibase.exception.DatabaseException: Duplicate column name "LAST_MODIFIED_DATE"; SQL statement:
CREATE OR REPLACE VIEW LDT.homepage_view AS select deal.id as DealId,
            deal.file_name as Filename,
            deal.target_borrower_sponsor as TargetBorrowerSponsor,
            st.name as SyndicationType,
            deal.country as Country,
            deal.region as Region,
            deal.currency as Currency,
            deal.business_area_id as BusinessArea,
            cl.name as ConfidentialityLevel,
            deal.sti_one_id as STIOne,
            deal.smac_id as Smac,
            deal.created_date as created_date,
            group_concat(distinct db.ricos_id) as Borrowers,
            group_concat(distinct s.name) as Statuses,
            state.name as State,
            ms.name as MarketSegment,
            pl.name as ProductLine,
            deal.debt_domain_id as DebtDomainId,
            bool_and(cc.rpc_mandatory) as RPCMandatory,
            f.booking_entity as BookingEntity,
            group_concat(distinct ott.name order by ott.name) as OriginationTeams,
            group_concat(distinct dtt.name order by dtt.name) as DistributionTeams,
            dlud.last_modified_date as last_modified_date
            from ldt.deals as deal
            left join ldt.syndication_types as st on st.code = deal.syndicationtype_code
            left join ldt.confidentiality_levels as cl on cl.code = deal.confidentialitylevel_code
            left join ldt.market_segments as ms on ms.code = deal.marketsegment_code
            left join ldt.product_lines as pl on pl.code = deal.productline_code
            left join ldt.deals_statuses as ds on ds.deal_id = deal.id
            left join ldt.statuses as s on s.code = ds.status_code
            left join ldt.states as state on state.code = deal.state_code
            left join ldt.deals_borrowers as db on db.deal_id = deal.id
            left join ldt.credit_committees as cc on cc.deal_id = deal.id
            left join ldt.finalizations as f on f.deal_id = deal.id
            left join ldt.deals_origination_teams as ot on ot.deals_id = deal.id
            left join ldt.deals_distribution_teams as dt on dt.deals_id = deal.id
            left join ldt.teams as ott on ott.code = ot.originationteams_code and ott.team_type = 'ORIGINATION'
            left join ldt.teams as dtt on dtt.code = dt.distributionteams_code and dtt.team_type = 'DISTRIBUTION'
            left join ldt.deal_last_update_date as dlud on dlud.id = deal.id
            group by deal.id, st.name, cl.name, f.booking_entity, state.name, ms.name, pl.name, dlud.last_modified_date [42121-199] [Failed SQL: (42121) CREATE OR REPLACE VIEW LDT.homepage_view AS select deal.id as DealId,
            deal.file_name as Filename,
            deal.target_borrower_sponsor as TargetBorrowerSponsor,
            st.name as SyndicationType,
            deal.country as Country,
            deal.region as Region,
            deal.currency as Currency,
            deal.business_area_id as BusinessArea,
            cl.name as ConfidentialityLevel,
            deal.sti_one_id as STIOne,
            deal.smac_id as Smac,
            deal.created_date as created_date,
            group_concat(distinct db.ricos_id) as Borrowers,
            group_concat(distinct s.name) as Statuses,
            state.name as State,
            ms.name as MarketSegment,
            pl.name as ProductLine,
            deal.debt_domain_id as DebtDomainId,
            bool_and(cc.rpc_mandatory) as RPCMandatory,
            f.booking_entity as BookingEntity,
            group_concat(distinct ott.name order by ott.name) as OriginationTeams,
            group_concat(distinct dtt.name order by dtt.name) as DistributionTeams,
            dlud.last_modified_date as last_modified_date
            from ldt.deals as deal
            left join ldt.syndication_types as st on st.code = deal.syndicationtype_code
            left join ldt.confidentiality_levels as cl on cl.code = deal.confidentialitylevel_code
            left join ldt.market_segments as ms on ms.code = deal.marketsegment_code
            left join ldt.product_lines as pl on pl.code = deal.productline_code
            left join ldt.deals_statuses as ds on ds.deal_id = deal.id
            left join ldt.statuses as s on s.code = ds.status_code
            left join ldt.states as state on state.code = deal.state_code
            left join ldt.deals_borrowers as db on db.deal_id = deal.id
            left join ldt.credit_committees as cc on cc.deal_id = deal.id
            left join ldt.finalizations as f on f.deal_id = deal.id
            left join ldt.deals_origination_teams as ot on ot.deals_id = deal.id
            left join ldt.deals_distribution_teams as dt on dt.deals_id = deal.id
            left join ldt.teams as ott on ott.code = ot.originationteams_code and ott.team_type = 'ORIGINATION'
            left join ldt.teams as dtt on dtt.code = dt.distributionteams_code and dtt.team_type = 'DISTRIBUTION'
            left join ldt.deal_last_update_date as dlud on dlud.id = deal.id
            group by deal.id, st.name, cl.name, f.booking_entity, state.name, ms.name, pl.name, dlud.last_modified_date]



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.sql.DataSource;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class DatabaseMetadataService {

    private final DataSource dataSource;

    @Autowired
    public DatabaseMetadataService(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public Map<String, List<String>> getAllTablesAndColumns() throws SQLException {
        Map<String, List<String>> tablesAndColumns = new HashMap<>();

        try (var connection = dataSource.getConnection()) {
            DatabaseMetaData metaData = connection.getMetaData();

            // Retrieve tables
            ResultSet tablesResultSet = metaData.getTables(null, null, null, new String[]{"TABLE"});
            while (tablesResultSet.next()) {
                String tableName = tablesResultSet.getString("TABLE_NAME");
                List<String> columns = getColumnsForTable(metaData, tableName);
                tablesAndColumns.put(tableName, columns);
            }
        }

        return tablesAndColumns;
    }

    private List<String> getColumnsForTable(DatabaseMetaData metaData, String tableName) throws SQLException {
        List<String> columns = new ArrayList<>();
        ResultSet columnsResultSet = metaData.getColumns(null, null, tableName, null);
        
        while (columnsResultSet.next()) {
            String columnName = columnsResultSet.getString("COLUMN_NAME");
            columns.add(columnName);
        }
        
        return columns;
    }
}









DO $$ 
DECLARE 
    table_name RECORD;
BEGIN 
    FOR table_name IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
        EXECUTE 'DROP TABLE ' || table_name.tablename || ' CASCADE'; 
    END LOOP; 
END $$;



