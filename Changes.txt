 Content type = application/json
             Body = {"@type":"Error","status":"INTERNAL_SERVER_ERROR","message":"could not prepare statement [Duplicate column name \"DEAL_ID\"; SQL statement:\ninsert into ldt.deals_statuses (comment,created_date,deal_id,last_modified_date,deal_id,status_code) values (?,?,?,?,?,?) [42121-224]] [insert into ldt.deals_statuses (comment,created_date,deal_id,last_modified_date,deal_id,status_code) values (?,?,?,?,?,?)]; SQL [insert into ldt.deals_statuses (comment,created_date,deal_id,last_modified_date,deal_id,status_code) values (?,?,?,?,?,?)]","cause":"org.hibernate.exception.SQLGrammarException: could not prepare statement [Duplicate column name \"DEAL_ID\"; SQL statement:\ninsert into ldt.deals_statuses (comment,created_date,deal_id,last_modified_date,deal_id,status_code) values (?,?,?,?,?,?) [42121-224]] [insert into ldt.deals_statuses (comment,created_date,deal_id,last_modified_date,deal_id,status_code) values (?,?,?,?,?,?)]"}


----------------------------------------------------------------------


package com.cacib.loanscape.ldt.entities;

import com.cacib.loanscape.ldt.audit.listeners.AuditingEntityListenerLoanscape;
import com.cacib.loanscape.ldt.entities.EDealStatus.DealStatusIdentity;
import com.cacib.loanscape.ldt.kafka.clientlive.listeners.DealStatusAuditListener;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

import jakarta.persistence.*;
import java.io.Serializable;

@Entity(name = "DealsStatuses")
@Table(schema = "ldt", name = "deals_statuses")
@Getter
@Setter
@IdClass(DealStatusIdentity.class)
@EntityListeners(value = {AuditingEntityListenerLoanscape.class, DealStatusAuditListener.class})
public class EDealStatus extends EntityBase<DealStatusIdentity> {

    @Getter
    @Setter
    @EqualsAndHashCode
    public static class DealStatusIdentity implements Serializable {
        private static final long serialVersionUID = -8797246308635660328L;
        private String statusCode;
        private Long dealId;
    }

    @ManyToOne
    @JoinColumn(name = "deal_id", referencedColumnName = "id")
    private EDeal deal;


    @Id
    @Column(name = "status_code", nullable = false)
    private String statusCode;

    @Id
    @Column(name = "deal_id", nullable = false)
    private Long dealId;

    private String comment;

    @Override
    public DealStatusIdentity getId() {
        var id = new DealStatusIdentity();
        id.setDealId(dealId);
        id.setStatusCode(statusCode);
        return id;
    }

    @Override
    public Long getParentDealId() {
        return dealId;
    }

}


-----------------------------------------------------------------


package com.cacib.loanscape.ldt.entities;

import com.cacib.loanscape.ldt.audit.listeners.AuditingEntityListenerLoanscape;
import com.cacib.loanscape.ldt.entities.converters.DateDayOnly;
import com.cacib.loanscape.ldt.entities.steps.EStepCreditCommittee;
import com.cacib.loanscape.ldt.entities.steps.EStepFinalization;
import com.cacib.loanscape.ldt.entities.steps.EStepMandate;
import com.cacib.loanscape.ldt.entities.steps.EStepSyndication;
import com.cacib.loanscape.ldt.entities.teams.EDistributionTeam;
import com.cacib.loanscape.ldt.entities.teams.EOriginationTeam;
import com.cacib.loanscape.ldt.entities.users.User;
import com.fasterxml.jackson.annotation.JsonBackReference;
import lombok.Getter;
import lombok.Setter;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;

/**
 * This entity describe the Deal infos
 *
 * @author ut2q4t
 */
@SqlResultSetMapping(name = "ExtractResults", columns = {@ColumnResult(name = "Histo Situation", type = String.class),
        @ColumnResult(name = "Histo Period", type = String.class), @ColumnResult(name = "State", type = String.class),
        @ColumnResult(name = "Deal code", type = String.class), @ColumnResult(name = "Deal name", type = String.class),
        @ColumnResult(name = "Smac ID", type = String.class), @ColumnResult(name = "Status", type = String.class),
        @ColumnResult(name = "Product line", type = String.class),
        @ColumnResult(name = "Market segment", type = String.class),
        @ColumnResult(name = "Business Area", type = String.class),
        @ColumnResult(name = "Business Sector", type = String.class),
        @ColumnResult(name = "Country", type = String.class), @ColumnResult(name = "Region", type = String.class),
        @ColumnResult(name = "Confidentiality level", type = String.class),
        @ColumnResult(name = "Credit Committee Type", type = String.class),
        @ColumnResult(name = "Syndication type", type = String.class),
        @ColumnResult(name = "Mandate Role", type = String.class),
        @ColumnResult(name = "Use of funds", type = String.class),
        @ColumnResult(name = "Borrower name", type = String.class), @ColumnResult(name = "Title", type = String.class),
        @ColumnResult(name = "Origination lead user", type = String.class),
        @ColumnResult(name = "Distribution lead user", type = String.class),
        @ColumnResult(name = "Currency", type = String.class),
        @ColumnResult(name = "Amount at launch", type = String.class),
        @ColumnResult(name = "Amount at launch (EUR)", type = String.class),
        @ColumnResult(name = "Amount left to sell", type = String.class),
        @ColumnResult(name = "Amount left to sell (EUR)", type = String.class),
        @ColumnResult(name = "Amount sold to the market", type = String.class),
        @ColumnResult(name = "Amount sold to the market (EUR)", type = String.class),
        @ColumnResult(name = "Green", type = String.class),
        @ColumnResult(name = "Sustainibility linked", type = String.class),
        @ColumnResult(name = "DOD Opinion Date", type = String.class),
        @ColumnResult(name = "Additional Risk", type = String.class),
        @ColumnResult(name = "Additional Risk (EUR)", type = String.class),
        @ColumnResult(name = "Investor book", type = String.class),
        @ColumnResult(name = "Investor book (eur)", type = String.class),
        @ColumnResult(name = "Credit Committee Date", type = String.class),
        @ColumnResult(name = "Approved Underwritting", type = String.class),
        @ColumnResult(name = "Approved Underwritting (EUR)", type = String.class),
        @ColumnResult(name = "Final Take", type = String.class),
        @ColumnResult(name = "Final Take (EUR)", type = String.class),
        @ColumnResult(name = "Best Effort", type = String.class),
        @ColumnResult(name = "Best Effort (EUR)", type = String.class),
        @ColumnResult(name = "Minimum relashionship exposure", type = String.class),
        @ColumnResult(name = "Minimum relashionship exposure (EUR)", type = String.class),
        @ColumnResult(name = "ECB Leverage", type = String.class),
        @ColumnResult(name = "RPC mandatory", type = String.class),
        @ColumnResult(name = "Mandate Date", type = String.class),
        @ColumnResult(name = "Initial commitment", type = String.class),
        @ColumnResult(name = "Initial_commitment(EUR)", type = String.class),
        @ColumnResult(name = "Investor book allocated amount", type = String.class),
        @ColumnResult(name = "Investor book allocated amount", type = String.class),
        @ColumnResult(name = "Syndication launch Date", type = String.class),
        @ColumnResult(name = "Syndication Selldown period", type = String.class),
        @ColumnResult(name = "Syndication closing Date", type = String.class),
        @ColumnResult(name = "Current hold", type = String.class),
        @ColumnResult(name = "Current hold (EUR)", type = String.class),
        @ColumnResult(name = "Syndication Amount to sell", type = String.class),
        @ColumnResult(name = "Syndication Amount to sell (EUR)", type = String.class),
        @ColumnResult(name = "Syndication sold amount", type = String.class),
        @ColumnResult(name = "Syndication sold amount (EUR)", type = String.class),
        @ColumnResult(name = "Syndication final allocated amount", type = String.class),
        @ColumnResult(name = "Syndication final allocated amount (EUR)", type = String.class),
        @ColumnResult(name = "Final take achieved date", type = String.class),
        @ColumnResult(name = "Investor book position amount", type = String.class),
        @ColumnResult(name = "Investor book position amount (EUR)", type = String.class),
        @ColumnResult(name = "Number of Bookrunner", type = String.class),
        @ColumnResult(name = "Number of invited bank", type = String.class),
        @ColumnResult(name = "Number of committeed bank", type = String.class),
        @ColumnResult(name = "Closing global faclity amount raised", type = String.class),
        @ColumnResult(name = "Closing global faclity amount raised (EUR)", type = String.class),
        @ColumnResult(name = "Closing booking date", type = String.class),
        @ColumnResult(name = "Closing advisory fees", type = String.class),
        @ColumnResult(name = "Closing advisory fees (EUR)", type = String.class),
        @ColumnResult(name = "Closing arrangement fees", type = String.class),
        @ColumnResult(name = "Closing arrangement fees (EUR)", type = String.class),
        @ColumnResult(name = "Closing participation fees", type = String.class),
        @ColumnResult(name = "Closing participation fees (EUR)", type = String.class),
        @ColumnResult(name = "Closing overhold date", type = String.class),
        @ColumnResult(name = "Closing free to trade date", type = String.class),
        @ColumnResult(name = "Comments", type = String.class), @ColumnResult(name = "Date Id", type = String.class),
        @ColumnResult(name = "DebtDomain ID", type = String.class),
        @ColumnResult(name = "LDT STATUS", type = String.class) })

@SqlResultSetMapping(name = "HomepageResult", columns = {
        @ColumnResult(name = "DealId", type = Long.class),
        @ColumnResult(name = "Filename", type = String.class),
        @ColumnResult(name = "TargetBorrowerSponsor", type = String.class),
        @ColumnResult(name = "SyndicationType", type = String.class),
        @ColumnResult(name = "Country", type = String.class),
        @ColumnResult(name = "Region", type = String.class),
        @ColumnResult(name = "Currency", type = String.class),
        @ColumnResult(name = "OriginatorCountry", type = String.class),
        @ColumnResult(name = "BusinessArea", type = String.class),
        @ColumnResult(name = "ConfidentialityLevel", type = String.class),
        @ColumnResult(name = "STIOne", type = Long.class),
        @ColumnResult(name = "Smac", type = Long.class),
        @ColumnResult(name = "created_date", type = Date.class),
        @ColumnResult(name = "Borrowers", type = List.class),
        @ColumnResult(name = "Statuses", type = List.class),
        @ColumnResult(name = "State", type = String.class),
        @ColumnResult(name = "MarketSegment", type = String.class),
        @ColumnResult(name = "ProductLine", type = String.class),
        @ColumnResult(name = "DebtDomainId", type = Long.class),
        @ColumnResult(name = "RPCMandatory", type = Boolean.class),
        @ColumnResult(name = "BookingEntities", type = String.class),
        @ColumnResult(name = "OriginationTeams", type = String.class),
        @ColumnResult(name = "DistributionTeams", type = String.class),
        @ColumnResult(name = "last_modified_date", type = Date.class),
        @ColumnResult(name = "deal_to_be_reported", type = Boolean.class),
        @ColumnResult(name = "anticipated_booking_date", type = Date.class),
        @ColumnResult(name = "archived_date", type = Date.class),
        @ColumnResult(name = "key_deal", type = Boolean.class),
        @ColumnResult(name = "probability_of_success", type = Integer.class),
        @ColumnResult(name = "amount_at_launch", type = BigDecimal.class),
        @ColumnResult(name = "ClientLiveReferences", type = List.class),
        @ColumnResult(name = "latestStatus", type = String.class),
        @ColumnResult(name = "IncludeInForecast", type = Boolean.class)})
@SqlResultSetMapping(name = "ThombstoneResults", columns = { @ColumnResult(name = "ID Deal", type = String.class),
    @ColumnResult(name = "CACIB organisation - Product Line", type = String.class),
    @ColumnResult(name = "Region", type = String.class),
    @ColumnResult(name = "Deal country", type = String.class),
    @ColumnResult(name = "Credit Agreement Signing", type = LocalDateTime.class),
    @ColumnResult(name = "Deal Status", type = String.class),
    @ColumnResult(name = "CPH Borrower Name", type = String.class),
    @ColumnResult(name = "Deal Currency", type = String.class),
    @ColumnResult(name = "Deal Global Facility Amount At Signing", type = BigDecimal.class),
    @ColumnResult(name = "Deal Product", type = String.class),
    @ColumnResult(name = "Deal Title", type = String.class),
    @ColumnResult(name = "Deal Role", type = String.class),
    @ColumnResult(name = "Deal Use of funds", type = String.class),
    @ColumnResult(name = "Business Sector", type = Long.class),
    @ColumnResult(name = "First Tranches Details 4", type = String.class),
    @ColumnResult(name = "Additionnal information >>>", type = String.class),
    @ColumnResult(name = "Distribution Segment", type = String.class),
    @ColumnResult(name = "Origination Team", type = String.class),
    @ColumnResult(name = "Sustainability linked Loan (ESG index)", type = String.class),
    @ColumnResult(name = "Green Loan", type = String.class),
    @ColumnResult(name = "Eligible to League Tables (Bookrunner)", type = String.class),
    @ColumnResult(name = "Other Tranches Details 7", type = String.class)})
@Entity(name = "Deal")
@Table(schema = "ldt", name = "deals")
@Getter
@Setter
@EntityListeners(value = AuditingEntityListenerLoanscape.class)
public class EDeal extends VersionEntity<Long> {

    @Id
    @Column(name = "id", unique = true, updatable = false, nullable = false, insertable = true)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "file_name", insertable = true, nullable = true, unique = true, updatable = true)
    private String fileName;

    @ManyToOne(targetEntity = EState.class, fetch = FetchType.LAZY)
    private EState state;

    @OneToMany(targetEntity = EDealStatus.class, mappedBy = "deal", fetch = FetchType.EAGER)
    private List<EDealStatus> dealStatuses;

    @Column(name = "target_borrower_sponsor", insertable = true, nullable = true, unique = false, updatable = true)
    private String targetBorrowerSponsor;

    @Column(name = "amount_at_launch", insertable = true, nullable = true, unique = false, updatable = true)
    private BigDecimal launchAmount;

    @Column(name = "currency", insertable = true, nullable = true, unique = false, updatable = true)
    private String currency;

    @ManyToOne(fetch = FetchType.LAZY, targetEntity = ESyndicationType.class)
    private ESyndicationType syndicationType;

    @Column(name = "country", insertable = true, nullable = true, unique = false, updatable = true)
    private String country;

    @Column(name = "region", insertable = true, nullable = true, unique = false, updatable = true)
    private String region;

    @OneToOne(targetEntity = EConfidentialityLevel.class, fetch = FetchType.LAZY)
    private EConfidentialityLevel confidentialityLevel;

    @ManyToOne(targetEntity = EBusinessLine.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "business_line_id")
    private EBusinessLine businessLine;

    @ManyToOne(targetEntity = EUseOfFunds.class, fetch = FetchType.LAZY)
    private EUseOfFunds useOfFunds;

    @ManyToOne(targetEntity = EMarketSegment.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "market_segment_id")
    private EMarketSegment marketSegment;

    @Column(name = "business_area_id", insertable = true, nullable = true, unique = false, updatable = true)
    private String businessAreaId;

    @Column(name = "business_sector_id", insertable = true, nullable = true, unique = false, updatable = true)
    private Long businessSectorId;

    @Column(name = "debt_domain_id", insertable = true, updatable = true, nullable = true, unique = true)
    private Long debtDomainId;

    @Column(name ="id_clientlive_opportunity", insertable = true, updatable = true, nullable = true)
    private String idClientLiveOpportunity;

    @OneToMany(targetEntity = EDealsBorrowers.class, fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "deal")
    @JsonBackReference // JsonSerialization used in Audit
    private List<EDealsBorrowers> borrowers;

    @OneToMany(fetch = FetchType.LAZY, targetEntity = EStepCreditCommittee.class, mappedBy = "deal", cascade = {
            CascadeType.PERSIST })
    @JsonBackReference // JsonSerialization used in Audit
    private List<EStepCreditCommittee> creditCommitteeSteps;

    @OneToMany(fetch = FetchType.LAZY, targetEntity = EStepMandate.class, mappedBy = "deal", cascade = {
            CascadeType.PERSIST })
    @JsonBackReference // JsonSerialization used in Audit
    private List<EStepMandate> mandateSteps;

    @OneToMany(fetch = FetchType.LAZY, targetEntity = EStepSyndication.class, mappedBy = "deal", cascade = {
            CascadeType.PERSIST })
    @JsonBackReference // JsonSerialization used in Audit
    private List<EStepSyndication> syndicationSteps;

    @OneToMany(fetch = FetchType.LAZY, targetEntity = EStepFinalization.class, mappedBy = "deal", cascade = {
            CascadeType.PERSIST })
    @JsonBackReference // JsonSerialization used in Audit
    private List<EStepFinalization> finalizationSteps;

    @Convert(converter = DateDayOnly.class)
    @Column(name = "dod_opinion_date", insertable = true, nullable = true, unique = false, updatable = true)
    private LocalDate dodOpinionDate;

    @OneToMany(targetEntity = EPitchDate.class, mappedBy = "deal", cascade = { CascadeType.ALL })
    private List<EPitchDate> pitchDates;

    @Column(name = "sti_one_id", insertable = true, nullable = true, unique = false, updatable = true)
    private Long stiOneId;

    @Column(name = "smac_id", insertable = true, nullable = true, unique = false, updatable = true)
    private Long smacId;

    @Column(name = "green")
    private Boolean green;

    @Column(name = "sustainibility_linked")
    private Boolean sustainibilityLinked;

    @ManyToMany(fetch = FetchType.LAZY, targetEntity = EOriginationTeam.class, cascade = { CascadeType.PERSIST })
    @JoinTable(name = "deals_origination_teams", schema = "ldt", joinColumns = @JoinColumn(table = "deals", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(table = "teams", referencedColumnName = "code"))
    private List<EOriginationTeam> originationTeams;

    @ManyToMany(fetch = FetchType.LAZY, targetEntity = EDistributionTeam.class, cascade = {CascadeType.PERSIST})
    @JoinTable(name = "deals_distribution_teams", schema = "ldt", joinColumns = @JoinColumn(table = "deals", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(table = "teams", referencedColumnName = "code"))
    private List<EDistributionTeam> distributionTeams;

    @ManyToOne(targetEntity = User.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "origination_team_member_lead_id")
    private User originationTeamMemberLead;

    @Column(name = "originator_country")
    private String originatorCountry;

    @ManyToMany(fetch = FetchType.LAZY, targetEntity = User.class, cascade = {CascadeType.PERSIST})
    @JoinTable(name = "deals_origination_backup", schema = "ldt", joinColumns = @JoinColumn(table = "deals", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(table = "ldt_user", referencedColumnName = "id"))
    private List<User> originationTeamMemberBackUp;

    @ManyToOne(targetEntity = User.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "distribution_team_member_lead_id")
    private User distributionTeamMemberLead;

    @ManyToMany(fetch = FetchType.LAZY, targetEntity = User.class, cascade = {CascadeType.PERSIST})
    @JoinTable(name = "deals_distribution_backup", schema = "ldt", joinColumns = @JoinColumn(table = "deals", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(table = "ldt_user", referencedColumnName = "id"))
    private List<User> distributionTeamMemberBackUp;

    @ManyToMany(fetch = FetchType.LAZY, targetEntity = ECoverage.class, cascade = { CascadeType.PERSIST })
    @JoinTable(name = "deals_coverages", schema = "ldt", joinColumns = @JoinColumn(table = "deals", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(table = "coverages", referencedColumnName = "code"))
    private List<ECoverage> coverages;

    @ManyToOne(targetEntity = User.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "sales_lead_id")
    private User salesLead;

    @ManyToMany(fetch = FetchType.LAZY, targetEntity = User.class, cascade = { CascadeType.PERSIST })
    @JoinTable(name = "deals_sales_backup", schema = "ldt", joinColumns = @JoinColumn(table = "deals", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(table = "ldt_user", referencedColumnName = "id"))
    private List<User> salesBackup;

    @Convert(converter = DateDayOnly.class)
    @Column(name = "anticipated_booking_date", insertable = true, nullable = true, unique = false, updatable = true)
    private LocalDate anticipatedBookingDate;

    @Column(name = "forecasted_final_hold", insertable = true, nullable = true, unique = false, updatable = true)
    private BigDecimal forecastedFinalHold;

    @Column(name = "forecasted_new_rwa", insertable = true, nullable = true, unique = false, updatable = true)
    private BigDecimal forecastedNewRwa;

    @Column(name = "forecasted_new_liquidity", insertable = true, nullable = true, unique = false, updatable = true)
    private BigDecimal forecastedNewLiquidity;

    @Column(name = "forecasted_drawn_rate", insertable = true, nullable = true, unique = false, updatable = true)
    private BigDecimal forecastedDrawnRate;

    @Column(name = "ow_new_money", insertable = true, nullable = true, unique = false, updatable = true)
    private BigDecimal owNewMoney;

    @Column( name = "weighted_nbi")
    private BigDecimal weightedNBI;

    @Column( name = "enterprise_value")
    private BigDecimal enterpriseValue;

    @ManyToOne(targetEntity = EProductLine.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "product_line_id")
    private EProductLine productLine;

    @Column(name = "cph_borrower_code", insertable = true, nullable = true, unique = false, updatable = true)
    private String cphBorrowerCode;

    @Column(name = "affiliated_deal_id", updatable = false)
    private Long affiliatedDealId;

    @Column(name = "version_group_id", updatable = false)
    private Long versionGroupId;

    @Column(name = "allocation_finalized", nullable = false)
    private boolean allocationFinalized;

    @ManyToOne(targetEntity = ESubsector.class, fetch = FetchType.LAZY)
    private ESubsector subsector;

    @Column(name = "eligible_to_league_table", nullable = false)
    private boolean eligibleToLeagueTable;

    @Column(name = "total_gross_leverage_ratio")
    private BigDecimal totalGrossLeverageRatio;

    @Column(name = "ebitda")
    private BigDecimal ebitda;

    @Column(name = "deal_to_be_reported")
    private Boolean dealToBeReported;

    @Column(name = "key_deal")
    private Boolean keyDeal;

    @Column(name = "probability_of_success")
    private Integer probabilityOfSuccess;

    @ManyToOne(targetEntity = ETypeOfDeal.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "type_of_deal", referencedColumnName = "code")
    private ETypeOfDeal typeOfDeal;

    @ManyToOne(targetEntity = ETypeOfFinancing.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "type_of_financing", referencedColumnName = "code")
    private ETypeOfFinancing typeOfFinancing;

    @Column(name = "max_tenor")
    private Integer maxTenor;

    @Column(name = "max_tenor_duration")
    private String maxTenorDuration;

    @Column(name = "transaction_pi")
    private BigDecimal transactionPI;

    @Column(name = "net_year_1_nbi")
    private BigDecimal netYearOneNBI;

    @Column(name = "underwriting_rwa_ex_ante_amount")
    private BigDecimal underwritingRwaExAnteAmount;

    @Column(name = "include_in_forecast")
    private Boolean includeInForecast;

    @Column(name = "bizcom_bank_required")
    private Boolean bizCOMBankRequired;

    @Convert(converter = DateDayOnly.class)
    @Column(name = "bizcom_date")
    private LocalDate bizCOMDate;

    @Convert(converter = DateDayOnly.class)
    @Column(name = "bom_date")
    private LocalDate bomDate;

    @Column(name = "esg_comment")
    private String esgComment;

    @Column(name = "sent_to_client_live", nullable = false)
    private boolean sentToClientLive;

    @Column(name = "existing_exposure")
    private BigDecimal existingExposure;

    @Column(name = "new_net_exposure")
    private BigDecimal newNetExposure;

    @Column(name = "net_senior_leverage_ratio")
    private BigDecimal netSeniorLeverageRatio;

    @Column(name = "ecb_leverage_at_closing")
    private BigDecimal ecbLeverageAtClosing;

    @Column(name = "lifetime_net_nbi")
    private BigDecimal lifetimeNetNBI;


    @Column(name = "senior_debt")
    private BigDecimal seniorDebt;

    @Column(name = "junior_debt")
    private BigDecimal juniorDebt;

    @Column(name = "equity_debt")
    private BigDecimal equityDebt;

    @Column(name = "originator_comment")
    private String originatorComment;

    @Column(name = "buscom_or_early_bird_reference")
    private String buscomOrEarlyBirdReference;

    @Column(name = "deal_leader_name")
    private String dealLeaderName;

    @Column(name = "first_round_indicative_offer_date")
    private Date firstRoundIndicativeOfferDate;

    @Column(name = "second_round_firm_offer_date")
    private Date secondRoundFirmOfferDate;

    @Column(name = "transaction_summary")
    private boolean transactionSummary;

    @Column(name = "hedge_required")
    private boolean hedgeRequired;

    @Column(name = "tenant_fifty_percent")
    private boolean tenantFiftyPercent;

    @Column(name = "social_loan")
    private boolean socialLoan;

    @Column(name = "bom_decision")
    private boolean bomDecision;

    @Column(name = "eligible_tricp_or_aac")
    private boolean eligibleTricpOrAac;

    @Column(name = "export_desks")
    private String exportDesks;

    @Column(name = "import_or_borrower_desks")
    private String importOrBorrowerDesks;

    @Override
    public Long getParentDealId() {
        return this.getId();
    }
}
