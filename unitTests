 @Override
  public Optional<Opportunity> fetch(Long id) {
    Mono<Optional<Opportunity>> result =  Mono.defer(() -> {
      Optional<Deal> optionalDeal = dealService.fetchDeal(id);

      if (optionalDeal.isPresent()) {
        Deal deal = optionalDeal.get();
        Collection<EDealActor> dealActors = dealActorService.findByDealId(id);

        Mono<Void> commercialClientMono = Mono.fromRunnable(() -> dealActorService.setCommercialClients(deal, dealActors));
        Mono<Void> validationsMono = Mono.fromRunnable(() -> dealService.getAllValidations(deal));
        Mono<Void> counterpartiesMono = Mono.fromRunnable(() -> setCounterparties(deal, dealActors));

        return Mono.when(commercialClientMono, validationsMono, counterpartiesMono)
            .thenReturn(optionalDeal.map(opportunityDealMapper::toOpportunityDto));
      } else {
        return Mono.just(optionalDeal.map(opportunityDealMapper::toOpportunityDto));
      }
    });

    return result.block();
  }




java.lang.IllegalStateException: Illegal pop() with non-matching JdbcValuesSourceProcessingState
	at org.hibernate.sql.results.spi.LoadContexts.deregister(LoadContexts.java:46)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:211)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:361)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:168)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:93)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:31)
