public Mono<Optional<Opportunity>> fetchDummy(Long id) {
    return Mono.defer(() -> {
      Optional<Deal> optionalDeal = dealService.fetchDeal(id);

      if (optionalDeal.isPresent()) {
        Deal deal = optionalDeal.get();
        Collection<EDealActor> dealActors = dealActorService.findByDealId(id);

        Mono<Void> commercialClientMono = Mono.fromRunnable(() -> dealActorService.setCommercialClients(deal, dealActors));
        Mono<Void> validationsMono = Mono.fromRunnable(() -> dealService.getAllValidations(deal));
        Mono<Void> counterpartiesMono = Mono.fromRunnable(() -> setCounterparties(deal, dealActors));

        return Mono.when(commercialClientMono, validationsMono, counterpartiesMono)
            .thenReturn(optionalDeal.map(opportunityDealMapper::toOpportunityDto));
      } else {
        return Mono.just(Optional.empty());
      }
    });
  }


Refactored:


public Optional<Opportunity> fetchDummy(Long id) {
    return dealService.fetchDeal(id)
            .flatMap(deal -> {
                Collection<EDealActor> dealActors = dealActorService.findByDealId(id);

                // Execute tasks concurrently using a dedicated thread pool
                // to avoid blocking the reactive pipeline
                Flux.merge(
                        Mono.fromRunnable(() -> dealActorService.setCommercialClients(deal, dealActors))
                                .subscribeOn(Schedulers.boundedElastic()),
                        Mono.fromRunnable(() -> dealService.getAllValidations(deal))
                                .subscribeOn(Schedulers.boundedElastic()),
                        Mono.fromRunnable(() -> setCounterparties(deal, dealActors))
                                .subscribeOn(Schedulers.boundedElastic())
                )
                        .blockLast(); // Wait for completion of concurrent tasks

                return Optional.of(opportunityDealMapper.toOpportunityDto(deal));
            })
            .orElse(Optional.empty());
}
